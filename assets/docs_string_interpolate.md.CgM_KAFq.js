import{_ as i,c as l,a3 as n,j as t,a,t as r,o}from"./chunks/framework.DtMx7FFi.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/string/interpolate.md","filePath":"en/docs/string/interpolate.md","lastUpdated":1753269870000}'),d={name:"docs/string/interpolate.md"};function h(s,e,p,c,k,g){return o(),l("div",null,[e[2]||(e[2]=n(`<h2 id="interpolate" tabindex="-1">interpolate <a class="header-anchor" href="#interpolate" aria-label="Permalink to &quot;interpolate&quot;">​</a></h2><p>The <code>interpolate</code> function replaces placeholders in a string with values from a data dictionary.</p><h3 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to &quot;Syntax&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">interpolate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str: string, data: Record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PropertyKey, any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RegExp): string</span></span></code></pre></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>str</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">String containing placeholders in the format <code>\\{\\{key\\}\\}</code>.</td></tr><tr><td style="text-align:left;"><code>data</code></td><td style="text-align:left;"><code>Record&lt;PropertyKey, any&gt;</code></td><td style="text-align:left;">Data dictionary for interpolation.</td></tr><tr><td style="text-align:left;"><code>pattern</code></td><td style="text-align:left;"><code>RegExp</code> (optional)</td><td style="text-align:left;">Custom pattern for placeholders (default: <code>/\\{\\{(.*?)\\}\\}/g</code>).</td></tr></tbody></table><h3 id="return" tabindex="-1">Return <a class="header-anchor" href="#return" aria-label="Permalink to &quot;Return&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">Returns a new string with placeholders replaced by corresponding values from <code>data</code>.</td></tr></tbody></table><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\{\\{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\}\\}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Maria&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">interpolate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(template, data); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Hello, Maria!&quot;</span></span></code></pre></div><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h3>`,11)),t("ul",null,[e[0]||(e[0]=t("li",null,[a("Placeholders must be in the format "),t("code",null,"\\{\\{key\\}\\}"),a(" by default.")],-1)),e[1]||(e[1]=t("li",null,[a("If the value does not exist in "),t("code",null,"data"),a(", the placeholder is kept.")],-1)),t("li",null,"The backslashes () before the curly braces ( "+r(s.and)+" ) are escape characters used only to prevent conflicts with the documentation compiler. When using the function in practice, use simple braces without escaping.",1)]),e[3]||(e[3]=t("h3",{id:"references",tabindex:"-1"},[a("References "),t("a",{class:"header-anchor",href:"#references","aria-label":'Permalink to "References"'},"​")],-1)),e[4]||(e[4]=t("ul",null,[t("li",null,[t("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace",target:"_blank",rel:"noreferrer"},"MDN: String.prototype.replace()")])],-1))])}const f=i(d,[["render",h]]);export{u as __pageData,f as default};
