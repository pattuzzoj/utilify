import{_ as i,c as n,a3 as l,j as t,a as e,t as r,o as h}from"./chunks/framework.DWWPIHUH.js";const E=JSON.parse('{"title":"template","description":"","frontmatter":{},"headers":[],"relativePath":"docs/string/template.md","filePath":"en/docs/string/template.md","lastUpdated":1753268366000}'),p={name:"docs/string/template.md"};function d(s,a,o,k,c,g){return h(),n("div",null,[a[2]||(a[2]=l(`<h1 id="template" tabindex="-1">template <a class="header-anchor" href="#template" aria-label="Permalink to &quot;template&quot;">​</a></h1><p>Creates a template function that replaces placeholders in a string with values from a data object, supporting custom patterns and escaping.</p><h2 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to &quot;Syntax&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str: string, options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TemplateOptions)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string</span></span></code></pre></div><h3 id="templateoptions" tabindex="-1">TemplateOptions <a class="header-anchor" href="#templateoptions" aria-label="Permalink to &quot;TemplateOptions&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>pattern</code></td><td><code>RegExp</code> (optional)</td><td>Custom pattern for placeholders (default: <code>/\\{\\{(.*?)\\}\\}/g</code>).</td></tr><tr><td><code>escape</code></td><td><code>(value: string, key: string) =&gt; string</code> (optional)</td><td>Function to escape values before interpolation.</td></tr></tbody></table><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>str</code></td><td><code>string</code></td><td>The string with placeholders in the format <code>\\{\\{key\\}\\}</code>.</td></tr><tr><td><code>options</code></td><td><code>TemplateOptions</code> (optional)</td><td>Options for custom pattern and escaping.</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>(data: Record&lt;string, any&gt;) =&gt; string</code></td><td>A function that takes a data object and returns the interpolated string.</td></tr></tbody></table><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\{\\{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\}\\}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">escape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() });</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Maria&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Hello, MARIA!&quot;</span></span></code></pre></div><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2>`,13)),t("ul",null,[a[0]||(a[0]=t("li",null,[e("Throws "),t("code",null,"TypeError"),e(" if "),t("code",null,"str"),e(" is not a string, "),t("code",null,"pattern"),e(" is not a RegExp, or "),t("code",null,"escape"),e(" is not a function.")],-1)),a[1]||(a[1]=t("li",null,"Placeholders without a corresponding value remain unchanged.",-1)),t("li",null,"The backslashes () before the curly braces ( "+r(s.and)+" ) are escape characters used only to prevent conflicts with the documentation compiler. When using the function in practice, use simple braces without escaping.",1)]),a[3]||(a[3]=t("h2",{id:"references",tabindex:"-1"},[e("References "),t("a",{class:"header-anchor",href:"#references","aria-label":'Permalink to "References"'},"​")],-1)),a[4]||(a[4]=t("ul",null,[t("li",null,[t("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace",target:"_blank",rel:"noreferrer"},"MDN: String.prototype.replace()")])],-1))])}const y=i(p,[["render",d]]);export{E as __pageData,y as default};
